from typing import List, Tuple

def make_move(N: int, edges: List[Tuple]) -> Tuple[int, int, int, int]:
    # Create a grid to keep track of the boxes
    boxes = [[0] * N for _ in range(N)]

    # Check if the edge is valid
    def is_valid_edge(edge):
        x1, y1, x2, y2 = edge
        if x1 == x2:
            if y1 == y2 - 1 and boxes[x1][y1] == 0:
                return True
            if y1 == y2 + 1 and boxes[x1][y2] == 0:
                return True
        elif y1 == y2:
            if x1 == x2 - 1 and boxes[x1][y1] == 0:
                return True
            if x1 == x2 + 1 and boxes[x2][y1] == 0:
                return True
        return False

    # Check if the box is completed
    def is_completed_box(x, y):
        if y < N - 1 and boxes[x][y] != 0 and boxes[x][y+1] != 0 and boxes[x+1][y] != 0 and boxes[x+1][y+1] != 0:
            return True
        return False

    # Check if the game is over
    def is_game_over():
        for i in range(N):
            for j in range(N):
                if boxes[i][j] == 0:
                    return False
        return True

    # Get the number of squares captured by a player
    def get_square_count(player):
        count = 0
        for i in range(N-1):
            for j in range(N-1):
                if boxes[i][j] == player:
                    count += 1
        return count

    # Calculate the heuristic value for a move
    def calculate_heuristic(edge):
        x1, y1, x2, y2 = edge
        player = (x1 + y1) % 3 + 1
        count = 0

        # Simulate the move and count the number of captured squares
        if x1 == x2:
            if y1 == y2 - 1:
                if is_completed_box(x1, y1):
                    count += 1
                if y1 > 0 and is_completed_box(x1, y1-1):
                    count += 1
            else:
                if is_completed_box(x1, y2):
                    count += 1
                if y2 > 0 and is_completed_box(x1, y2-1):
                    count += 1
        else:
            if x1 == x2 - 1:
                if is_completed_box(x1, y1):
                    count += 1
                if x1 > 0 and is_completed_box(x1-1, y1):
                    count += 1
            else:
                if is_completed_box(x2, y1):
                    count += 1
                if x2 > 0 and is_completed_box(x2-1, y1):
                    count += 1

        # Consider the opponents' moves and adjust the count
        for e in edges:
            if e != edge:
                x1, y1, x2, y2 = e
                if (x1 + y1) % 3 == player - 1:
                    if is_completed_box(x1, y1) and boxes[x1][y1] != player:
                    	count -= 1
                    if is_completed_box(x1, y1 - 1) and boxes[x1][y1 - 1] != player:
                    	count -= 1
            else:
                if is_completed_box(x1, y1) and boxes[x1][y1] != player:
                    count -= 1
                if is_completed_box(x1 - 1, y1) and boxes[x1 - 1][y1] != player:
                    count -= 1

        return count

    # Get the available edges to play
    def get_available_edges():
        available_edges = []
        for i in range(N):
            for j in range(N):
                if j < N - 1 and boxes[i][j] == 0:
                    available_edges.append((i, j, i, j + 1))
                if i < N - 1 and boxes[i][j] == 0:
                    available_edges.append((i, j, i + 1, j))
        return available_edges

    # Main logic for selecting the best move
    available_edges = get_available_edges()
    best_edge = None
    max_heuristic = float('-inf')

    for edge in available_edges:
        if is_valid_edge(edge):
            heuristic = calculate_heuristic(edge)
            if heuristic > max_heuristic:
                max_heuristic = heuristic
                best_edge = edge

    if best_edge is None:
        print("Invalid edge")
    else:
        return best_edge

